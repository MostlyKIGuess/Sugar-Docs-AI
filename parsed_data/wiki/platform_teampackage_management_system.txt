Title: Platform Team/Package Management System
URL: https://wiki.sugarlabs.org/go/Platform_Team/Package_Management_System
--------------------------------------------------------------------------------
Contents
1
Summary
2
Zero Install basis
3
Further reading
4
Getting involved
5
Resources
6
Subpages
Summary
Sweets is a
Package Management System
entirely based on
Zero Install
, a decentralized cross-distribution software installation system. It is intended to distribute various software projects created in the Sugar ecosystem, such as libraries, sugar itself, and sugar activities.
This new distribution method is initiated with these assumptions:
The method to share software projects should to be as convenient as possible.
It is important to stimulate users into becoming doers—to modify existing activities, and to share the results of their experiments with other people, viz., a distribution method should handle different variants of the same project.
This distribution method is not intended to be the only one, but is targeted more towards direct distribution—from software creators to software users.
The goal is to create a new distribution method that goes beyond reusing the current methods:
.xo bundles
Work smoothly only for pure python activities, though only if all (and the same) dependencies are installed on all systems. They stop working smoothly if activities use non-standard dependencies or contain binaries.
But, are not effective in supporting the simultaneous use of multiple versions of software, e.g., the results of experiments (the work) of different doers, in one environment. Users must manually handle the variety of activity versions, e.g., sort out all the local bundles or directories in
~/Activities
.
native packages
Are not the shortest way to connect developers with users.
In most cases, they don't support multiple versions of the same project.
They don't work at all for sharing results of experiments.
And, at the same time, the existing distribution methods are available for reuse in Sweets:
.xo bundles
are a subset of the Sweets workflow, from the usage point of view.
It is possible to bundle an entire directory as a sweet project to use it as a regular .xo file.
native packages
Sweets is not intended to create one more GNU/Linux distribution. It distributes only projects that people create within the Sugar community; all other software, i.e., dependencies, will be reused from native packages.
For cases like Sugar deployments, using the more centralized, regular repositories (third party or official GNU/Linux distributions with native packages) makes more sense. These native packages of Sugar software will be included in Sweets, as well. When people start using Sweets on top of these Sugar distributions, they will have the chance to choose between natively packaged Sugar components and components that came directly from software creators.
It is possible, when there is a need, to automatically package sweets into native packages. See
Sweets Distribution
, for example.
See also the initial release
notes
.
Zero Install basis
Sweets is entirely based on Zero Install. Sweets might be treated as a tools and infrastructure wrapper around Zero Install. See Zero Install's home page,
http://0install.net/
, for detailed information. And the
design
page in particular.
Further reading
Sweets Architecture
- A guide to basic Sweets concepts.
Sweets Usage
- A guide to know how to launch software using Sweets.
Sweets Packaging
- A guide to know how to make your software accessible via Sweets.
Infrastructure Map
- An overview of the Sweets software world.
Getting involved
Read the
HACKING
file to know how to contribute with code.
Submit
your bug report or feature request.
Subscribe to the
sugar-devel
mailing list and email with the subject prefixed with
[SWEETS]
.
Ask your question on IRC channels,
#sugar
(not logged) or
#sugar-newbies
(logged).
Resources
Sources
.
Recipe files
specification
.
Subpages
Platform Team/Package Management System/1.0
Platform Team/Package Management System/1.0/Notes
Platform Team/Package Management System/1.0/Roadmap
Platform Team/Package Management System/1.1
Platform Team/Package Management System/1.1/Todo
Platform Team/Package Management System/Architecture
Platform Team/Package Management System/Feedback
Platform Team/Package Management System/Getting started
Platform Team/Package Management System/Glossary