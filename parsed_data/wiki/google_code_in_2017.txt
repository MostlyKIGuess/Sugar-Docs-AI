Title: Google Code In 2017
URL: https://wiki.sugarlabs.org/go/Google_Code_In_2017#Mentors
--------------------------------------------------------------------------------
This is the project page for the Sugar Labs
application
to
Google Code In 2017
. Sugar Labs community members: please feel free to add tasks below.
Contents
1
Message to potential participants
2
Why Sugar Labs is participating
3
Some background from GCI
3.1
Open Source Fundamentals
3.2
Collaboration
3.3
Quality over Quantity
4
Some basics about Sugar Labs and Sugar development
4.1
Basics: Attribution and Licensing
4.2
Setting up a Sugarizer environment
4.3
Setting up a Sugar desktop environment
4.4
Getting started with coding in Sugar
4.5
Getting started with GIT
4.6
Getting started with Sugarizer
4.7
Getting a wiki account
4.8
Getting help
5
This is a stub for 25+ example tasks new for GCI 2017.
5.1
beginner tasks
5.2
general tasks
6
Mentors
Message to potential participants
It is important that you obtain permission of your parents.
Es importante que obtengas el permiso de tus padres para participar.
Please see the Contest Rules for Eligibility and Registration process.
https://developers.google.com/open-source/gci/resources/contest-rules
Details regarding the required forms and paperwork are here:
Google Code In 2017/Participate#Students
.
Also, you will likely need to set up the Sugar development environment. See
http://developer.sugarlabs.org/dev-environment.md.html
for details. Further information about contributing to the project can be found here:
http://developer.sugarlabs.org/
Please don't hesitate to ask questions on our irc channel (#sugar on irc.freenode.net) or on the sugar-devel list: sugar-devel AT lists.sugarlabs DOT org
Why Sugar Labs is participating
Sugar is written and maintained by volunteers, who range from seasoned professionals to children as young as 12-years of age. Children who have grown up with Sugar have transitioned from Sugar users to Sugar App developers to Sugar maintainers. They hang out on IRC with the global Sugar developer community and are full-fledged members of the Sugar development team. It is this latter group of children we hope will participate in and benefit from Google Code-in. Specifically we want to re-enforce the message that Sugar belongs to its users and that they have both ownership and the responsibility that ownership implies. Just as learning is not something done to you, but something you do, learning with Sugar ultimately means participating in the Sugar development process. At Sugar Labs, we are trying to bring the culture of Free Software into the culture of school. So the Code-in is not just an opportunity for us to get some tasks accomplished, it is quintessential to our overall mission.
Some background from GCI
[See
https://developers.google.com/open-source/gci/resources/getting-started
]
Open Source Fundamentals
You can contribute without being a coder!
You do not have to be a coder to contribute to open source. There are many different skill sets needed to help an open source community thrive:
Documentation
If you are a good writer and enjoy attention to detail then you might want to contribute by writing or editing documentation. Documentation is a huge part of a successful open source project. Organizations need documentation to help attract new contributors as it helps them see what the codebase looks like and where things are and what the plan is for the project.
Research
An organization may need help crunching numbers or sorting through pages of documents to better understand what the users want or need.  There are many different types of tasks that students could work on that are very important to the health of the project.
Outreach
If you have an outgoing personality and like being around and talking to people, take a look at the outreach tasks. Outreach tasks often include hosting meetups in your local community or creating a plan on how people around the globe can host a meetup about the project in their local communities.
Training
You could create a YouTube video discussing a new feature of the project or maybe some basics on what the project does so people who haven’t heard about it can understand the project and get involved.
User Interface
User interface can include many types of tasks including designing new aspects of a webpage or creating a new logo for the project. It may also include various accessibility opportunities to help make the project easier for people who are blind.
Other
If you have an idea that may help an organization, reach out to them and let them know! Sometimes the best task is one that the organization hasn’t even considered yet.
Collaboration
Open source is not just about coding but working with other people to find the best solution. Being a part of the community is an essential part of success in Google Code-in.  Mentors tell us every year that their best students were the ones who worked hard on their projects but also participated on IRC and helped answer questions other students had. Collaborate with the community and mentors on the #sugar channel in the irc.freenode.net network.
Quality over Quantity
It’s not about being the student who completes the most tasks, that only gets you to the top 10 to be reviewed, it doesn’t mean you will be a grand prize winner. We have had quite a few students who completed the most tasks for their organization yet were not named as Grand Prize Winners because they did everything solo and didn’t get involved in the community or think about the health of the project as a whole, they just kept completing task after task like a machine. If you actively participate in the community then you not only feel the camaraderie that comes with working as a team but you become committed to making the project better for everyone.
Some basics about Sugar Labs and Sugar development
For some basics about the project, see
Chapter 4 of Learning to Change the World
.
Basics: Attribution and Licensing
Read
Attribution and Licensing
, as both are important for all submissions.
Setting up a Sugarizer environment
Use your computer.  See also
#Getting started with Sugarizer
.
Setting up a Sugar desktop environment
There are several options for setting up the Sugar desktop environment for development, depending on what equipment you have;
Your Equipment
Your Operating System
Our Recommendation
You have only one computer and don't want to erase it
Linux, Windows, macOS, or iOS
Install virtualisation software, make a new virtual machine and install
Sugar Live Build
,
Sugar on a Stick
,
Ubuntu
,
Fedora
, or
Debian
.
Linux
Install Sugar packages from your distribution, see
Ubuntu
,
Fedora
or
Debian
.  For other distributions, contact your distribution community.
You have another computer that can be erased
Doesn't matter
Install
Sugar Live Build
,
Sugar on a Stick
,
Ubuntu
,
Fedora
, or
Debian
.
What's the difference between Live Build, Sugar on a Stick and the various Linux options?
Live Build (based on Debian)
Sugar on a Stick (based on Fedora)
Ubuntu, Debian or Fedora
Sugar desktop user experience on startup
yes, 0.112
yes, 0.110
no, must install packages
Good for Sugar activity development
yes
no, must install packages
no, must install packages
Good for Sugar desktop module development
yes, source code included
no, must install git and use rpmbuild
no, must install packages
Works on a spare computer
yes
yes
yes
Works as a Virtual Machine
yes
yes
yes
See also
Setup a development environment
.
Getting started with coding in Sugar
Sugar development is in either Python or JavaScript languages.
For the JavaScript language, you will need knowledge of;
JavaScript;
HTML5;
web browsers;
web design; and,
web deployment.
For the Python language, you will need knowledge of;
Python
;
the
PyGObject
package;
the
Python bindings
for
GTK+ 3
; and
the
Gtk-3.0 section of the PyGObject API Reference
.
For both, you will need knowledge of Sugar activity development, see the book
Make Your Own Sugar Activities!
Python programmers, you must run
pep8
and pyflakes on your code
before
submitting your patches.
Getting started with GIT
Some knowledge of git is important as your work will be submitted to our
git repositories
. The basic mechanism is a pull-request (PR), which is explained in
Contributing
.
It is required that you follow the steps outlined on the
Contributing
page when doing coding and documentation tasks in GCI.
GitHub provides a
tutorial
. There are many other guides to GIT as well.
Our old bug tracker is
https://bugs.sugarlabs.org
, but these days, we mostly report bugs using the
issues
feature of GitHub. (See
https://guides.github.com/features/issues/
for details on GitHub Issues.)
Getting started with Sugarizer
Sugar Web Framework is the
JavaScript Framework for Sugar
.
Sugarizer
is a subset of Sugar that allow running activities developed with Sugar Web Framework on any web browser. Sugarizer is also available as Android, iOS, Firefox OS and Chrome Web App.
Getting a wiki account
Some tasks require that you make edits to this wiki for which you'll need an account. Please email walter @ sugarlabs . org to request an account.
Getting help
Got a problem?  Ask your mentors, ask other students, or ask the Sugar Labs community.
The Sugar Labs community is large, and there are people who are not mentors in the contest.  Mentors are
listed
.  Everyone else you talk with may be a non-mentor.
As part of Sugar Labs community, non-mentors are to treat students in accord with the
Code of Conduct
, and as if they are new to Sugar Labs.
Students should keep in mind that some people are non-mentors, and cannot see the contest tasks, contest progress, dates, or information about students.  When communicating widely, be sure to;
introduce yourself, the first time;
tell us what your task is, without relying on a link to the task (because we probably can't see it);
talk about the task as if you want to do it yourself, not because of the contest; and,
defend your technical decisions without using the contest as a defence.
Non-mentors may give good guidance on technical decisions, but bad guidance on how they think a task is judged.  Always consult with your mentors as well.
This is a stub for 25+ example tasks new for GCI 2017.
Note, more detailed task descriptions will be available once the contest begins.
beginner tasks
Install the Sugar development environment by following the instruction at
[1]
.
Install Sugar in a virtual machine.
Install Sugar packages on Ubuntu, Debian, or Fedora.
Create an example program in Turtle Blocks (See
[2]
for some ideas).
Create an example program in Music Blocks.
Create a simple machine in Physics.
general tasks
Organize a Turtle Art Day (or Music Blocks Day) in your community (Outreach)
Create a 60 second promotional video on Sugar and its community (Outreach)
Host a Question and Answer (Q&A)/Information session about Sugar on Google Hangouts. (Outreach)
DIY Sugar on a Stick||Organize and host a Sugar on a Stick party where you show people how to make their own Sugar on a Stick. (Outreach)
Find an educator who is using open-source educational software to teach. Interview the educator about their experience as an educator and why they are using open-source software to teach. (Outreach)
Write a blog post about your experience as a GCI participant for Sugar Labs. (Outreach)
Create a 10-minute presentation celebrating at least three women within the Sugar community and/or the open-source community at large. (Research/Outreach)
Gather information on who could benefit from using or knowing about Sugar. (Research)
Find the resources that people are using throughout the world to learn about or teach Sugar Activities. (Research)
Find the missing repo: we've lost track of the source repository of some Sugar activities: help us find them (Research)
Investigate Google Fuzzing tool (Research)
Add more synths/sound fonts to Music Blocks (Research)
Design the music equivalent of Turtle Confusion for Music Blocks (Research)
Wiki cleanup (Documentation)
Music Blocks examples (Documentation/Training)
Write a review about an Activity in Sugar. (Documentation)
How should the Sugar UI change to accommodate a small screen? (User interface)
What else should be made easier to customize in Sugar with minimal programming? (User interface)
Create a unit tests for a JavaScript activity (Quality assurance)
Bugzilla clean up (Quality assurance)
Refactor Turtle graphics to adopt look of Javascript version (Code: Python)
Refactor Planet server for Turtle Blocks (Code: Python)
Write a Pinetrest plugin for the Sugar Journal (Code: Python)
Investigate CSound/Python version of Music Blocks (Code: Python)
Resolve an open issue from
https://github.com/sugarlabs/
(Code: Python)
Teach me how to draw activity (Code: Javascript)
Plugin manager for Turtle JS (Code: Javascript)
Improvements to Lilypond interface (Code: Javascript)
Add ABC import to Music Blocks (Code: Javascript)
Add Lilypond import to Music Blocks (Code: Javascript)
Write a Turtle plugin (Code: Javascript)
Visualize turtle movements in Pitch-Time Matrix (Code: Javascript)
Visualize turtle pitch in Music Blocks widget (Code: Javascript)
Write a JavaScript version of
Turtle Confusion
(Code: JavaScript)
Write a extruder in JavaScript to convert from SVG to STL for 3D printing. (Code: JavaScript)
Write a slicer in JavaScript to convert between SL and GCODE for 3D printing. (Code: JavaScript)
Resolve an open issue from
https://github.com/walterbender/musicblocks/
(Code: JavaScript)
Rewrite turtleblocksjs server (
https://github.com/tchx84/turtleblocksjs-server
) using NodeJS, express (
https://www.npmjs.com/package/express
) may be a good module to use (Code: Javascript)
Mentors: please feel free to add more tasks and/or add yourself as a potential mentor to an existing task.
Tasks must fall within one of these five categories:
#Documentation/Training
;
#Outreach/Research
;
#User Interface
;
#Quality Assurance
; and
#Code
.
Mentors
NOTES TO MENTORS
Please refer to
Google Code In 2017/Participate#Mentors
for details regarding enrolling as a mentor.
Please add yourself to the list below.
Feel free to add new tasks to the table above.
Depending on the task, we will assign multiple mentors from our various development and support teams.
Walter Bender - co-administrator
Ignacio Rodriguez - co-administrator
Hrishi Patel
Tayba Wasim (Tabs16)
Ibiam Chihurumnaya
Rishabh Thaney
Samson Goddy
Maluchukwu Nebeolisa (Malus)