Title: Design Team/Proposals/Touchscreen/On-screen Keyboard/Examples iOS
URL: https://wiki.sugarlabs.org/go/Design_Team/Proposals/Touchscreen/On-screen_Keyboard/Examples_iOS
--------------------------------------------------------------------------------
Contents
1
Onscreen keyboard iOS
1.1
Search
1.1.1
Safari search in page
1.1.2
App store search
1.1.3
Maps search
1.2
Text
1.2.1
Safari open url
1.2.2
Custom keyboard additions for special text editing cases
Onscreen keyboard iOS
Search
Safari search in page
Safari app, english keyboard, ABC, search in the page
Return key is changed to 'Search' and does invoke the search
additional navigation for the serach results added above the keyboard
Safari app, english keyboard, ABC, search in the page, capitalize letters
to capitalize a letter you need to press the 'Shift' key once
the 'Shift' key is highlighted then
the capitalization is only applied to the next character and the functionality is then automatically disabled again (key returns normal)
the upper case/lower case characters are not reflected in the keyboard itself
you can not make the upper case shift functionality permanent
Safari app, english keyboard, ?123, search in the page
App store search
Maps search
Text
Notes app, english keybard, ABC
Notes app, english keybard, .?123
Notes app, german keybard, ABC
Notes app, german keybard, .?123
Garageband app, german keyboard, ABC, edit the song title
Return key adjusted to 'Fertig'
Email app,
'@' key is available in the ABC layout
as special characters only '.' and '_' and '-' are available
Email app
is a standard ABC layout
Safari open url
Safari app, english keyboard, ABC, go to address:
highly customized for url editing
Return key adjusted to 'Go'
added '.com' key, no 'space' key
moved some of the keys from '.?123' here like ':', '/', '_' and '-'
removed the '!' and '?' key as the secondary option from the ',' and '.' key
Custom keyboard additions for special text editing cases
Below is a selection of custom keyboards designed for editing source code of various languages and environments, standard approach is to allow an application specific palette containing the extra functionality to be attached to the top edge of the on screen keyboard.
In this source code editor, note the extra row with commonly used source code characters. The developer here has increased the character density by implementing a custom joystick like behaviour where touching a key and releasing triggers the middle character, but touching and sliding in any of the NE SE SW NW directions triggers a character in a key corner.
This Lua source environment has a custom keyboard strip that adds more advanced features than just extra characters, several of these keys pop-up palettes with symbols and context sensitive help.
Another example of a python source code editor with a custom keyboard strip.
Custom keyboard strip for a Java Processing environment.
Extra key strip for this ssh console terminal emulator.
A simple text editor uses an extra keyboard strip for providing easy access to commonly used punctuation (even though they are accessible through extra key presses with the standard keyboard).
Wolfram's app has MANY extra keysÂ ;)
Numbers uses several context sensitive keyboard for inputting numerical data, date information, formulas, as well a just text.