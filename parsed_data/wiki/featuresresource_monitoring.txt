Title: Features/Resource monitoring
URL: https://wiki.sugarlabs.org/go/Features/Resource_monitoring
--------------------------------------------------------------------------------
This article is a
stub
. You can help Sugar Labs by
expanding it
.
There are comments (in italic) providing guidance to fill out each section, see also the
Feature Policy Page
for a more detailed explanation of the new-feature process.
Contents
1
Summary
2
Owner
3
Current status
4
Detailed Description
5
Benefit to Sugar
6
Scope
7
UI Design
8
How To Test
9
User Experience
10
Dependencies
11
Contingency Plan
12
Documentation
13
Release Notes
14
Comments and Discussion
Summary
Stimulate computer resource learning by providing progressive feedback on system resources.
Owner
This should link to your home wiki page so we know who you are
Name:
Your Name
Include you email address that you can be reached should people want to contact you about helping with your feature, status is requested, or technical issues need to be resolved
Email: <your email address so we can contact you, invite you to meetings, etc.>
Current status
Targeted release: (SUGAR_VERSION)
Last updated: (DATE)
Percentage of completion: XX%
Detailed Description
How does one learn to effectively use a new tool?
One must use the tool and experiment with it.  If your father introduced you to a pocketknife, and it had a dull blade, you would have a bad first impression and not learn too well.  My father gave me a knife with a sharp blade and a dull blade, asked me to discover the difference, and proceeded to show me how to sharpen the blade.
People who are new to computers will not know their limitations.  They must learn by discovery.  Unfortunately, the consequence of some computer requests will not be easily associated with their causes.  (Witness all those whose computers crash or lose documents because the user could not see the scores of windows or redundant documents that were open under the full screen.)  Some explicit feedback greatly aids in discovery.  I remember how quickly I learned to effectively query a database, after the database server was moved a few feet from me and I could hear the disc drives churning when I submitted a more complex form of a query.
So with Sugar, which will most often be run on a computer with limited resources, the new learner is greatly aided by having some signals that report on the status of the tool.  The child may see that certain actions have progressive consequences, and may learn how to quickly 'sharpen the blade that has become dull' by overuse.
A progressive scale of computer 'strain' made visible by notable icons would aid in learning with Sugar.  The progressive iconic feedback, itself, may be sufficient.  Critical or dangerous resource conditions deserve additional alert mechanisms, such as those proposed for the alert system.
The curious should also have the opportunity to delve more deeply into this computer behavior and see more background information about the state of the computer.  Hover panels should reveal some graphic information about the subsystems, and a 'Resource monitor' Activity should be opened if more information is requested by a primary click.  This Activity would graphically and textually deliver more layers of information, staged in an instructive progression.
(The sad face has been superseded by a
strained
face. See the UI section.)
A proposal to reveal system memory consumption on the upper Frame bar complements this feature.
Home View Framebar
Benefit to Sugar
This feature is considered so important in Paraguay, that they chose the happy computer as their mascot.
Scope
What work do the developers have to accomplish to complete the feature in time for release?  Is it a large change affecting many parts of the distribution or is it a very isolated change? What are those changes?
UI Design
Be sure to look at
Talk:Features/Resource monitoring
.
The Happy vs
Sad
metaphor has been replaced with 'Strained'
Other metaphors are possible, see
this discussion
.
How To Test
Features/Resource monitoring/Testing
User Experience
If this feature is noticeable by its target audience, how will their experiences change as a result?  Describe what they will see or notice.
Dependencies
What other packages (RPMs) depend on this package?  Are there changes outside the developers' control on which completion of this feature depends?  In other words, does your feature depend on completion of another feature owned by someone else or that you would need to coordinate, which might cause you to be unable to finish on time?  Other upstream projects like Python?
Contingency Plan
If you cannot complete your feature by the final development freeze, what is the backup plan?  This might be as simple as "None necessary, revert to previous release behaviour."  Or it might not.  If your feature is not completed in time, we want to assure others that other parts of Sugar will not be in jeopardy.
Documentation
Is there upstream documentation on this feature, or notes you have written yourself?  Has this topic been discussed in the mailing list or during a meeting? Link to that material here so other interested developers can get involved.
Release Notes
The Sugar Release Notes inform end-users about what is new in the release. An Example is
0.84/Notes
. The release notes also help users know how to deal with platform changes such as ABIs/APIs, configuration or data file formats, or upgrade concerns.  If there are any such changes involved in this feature, indicate them here.  You can also link to upstream documentation if it satisfies this need.  This information forms the basis of the release notes edited by the release team and shipped with the release.
Comments and Discussion
See
discussion tab for this feature