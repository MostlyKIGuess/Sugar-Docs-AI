Title: BugSquad/Resources
URL: https://wiki.sugarlabs.org/go/BugSquad/Resources
--------------------------------------------------------------------------------
Team Home
·
Join
·
Contacts
·
Resources
·
FAQ
·
Roadmap
·
To Do
·
Meetings
Note:
The contents of this section have been transcluded from another page,
BugSquad/Triage Guide
:
Contents
1
BugSquad/Triage Guide
1.1
Why bug triaging is helpful?
1.2
How to get up to speed
1.2.1
Create a trac account
1.2.2
Join the sugar-devel mailing list
1.2.3
Read the Stock Responses
1.2.4
Read the Status Fields
1.3
Triaging
1.3.1
Pick a bug
1.3.2
Find what should be changed
1.3.3
Ask someone to verify your changes
1.3.4
Make your changes
1.4
Steps of Triaging
1.4.1
Verify that the bug is not a duplicate
1.4.2
The bug report need some logs
1.4.3
If the bug is not described well
1.4.4
If the bug is in an obsolete version of the application
1.4.5
If the bug is not in Sugar
1.4.6
Severity of the bug
2
BugSquad/Testing
2.1
Testing Groups
2.2
Teaching Users How to File Good Bug Reports
2.3
Teaching Bug Reporters How to Follow Up
2.4
Creating Best Practices for Developer Testing
2.5
Coordinate with Release Managers
BugSquad/Triage Guide
Why bug triaging is helpful?
Filter out duplications
Verify that the information, needed by the developer to fix the bug, is present
Verify that the bug is filed against the correct component
Verify that the bug has the correct software version field
Verify the severity of the bug
How to get up to speed
Create a trac account
Create a trac account at
bugs.sugarlabs.org
.
Join the sugar-devel mailing list
To keep up to date with the recent discussion and developments we recommend joining the
sugar developers mailing list
. We might create a separate list for the Bugsquad in the future.
Read the Stock Responses
The
BugSquad/Triage Guide/Stock Responses
are general examples of the kinds of comments that triagers should add to bug reports. Please read them carefully. In most cases you can use one of them as a comment.
Read the Status Fields
The
BugSquad/Status Fields
describe the fields you can use to triage the bugs in Trac.
Triaging
Pick a bug
Use the tracker to
create a query
. This for example creates a query for
all open sugar bugs
. Choose one you want to triage and read it carefully.
Find what should be changed
Read the
BugSquad/Triage Guide#Steps of Triaging
to determine what should be changed (if anything) and how.
Ask someone to verify your changes
For the first bugs we encourage you to make the changes in conjunction with a member of the BugSquad team
BugSquad/Contacts#Squad Members
. You will find them usually at #sugar on freenode.
Make your changes
After someone verifies your changes (and likely refines them and/or points out other changes), either make those changes yourself or make sure that the reviewer makes them.
Steps of Triaging
These are some notes how to triage the bugs in detail. In all the cases you can find the matching stock response at
BugSquad/Triage Guide/Stock Responses
.
Verify that the bug is not a duplicate
Many times the particular bug has already been reported into our bug tracking system. Note to which bug this is a duplicate to and close this one with 'resolve as duplicate'. If the original bugs needs further information, please encourage the reporter to provide that information there.
The bug report need some logs
In most of the cases the developer could use some logs to better identify the problem. Instructions on how to take logs are at
BugSquad/Get Logs
.
If the bug is not described well
The bug report isn't very useful if the bug isn't described well. Some people do not read the
BugSquad/Bug Report
,
olpc:Reporting bugs
, or are just inexperienced. Best, is to use one of the stock answers and go to the next bug :)
If the bug is in an obsolete version of the application
Sugar developers may not work anymore on the specified version. If you are unsure if that is the case, please ask at
#sugar
or in the mailing list.
If the bug is not in Sugar
The bug might not be in sugar and in one of the libraries sugar is using (e.g. telepathy). Please try to help to get the bug report upstream. Also ensure that both bug reports contain a link to each other.
Severity of the bug
Verify that the severity of the bug is set correctly. What you should not try to set is the milestone and the priority of the bugs, this is the duty of the component maintainer. (Please refer to
Severity
for a definition of the severity fields.)
Note:
The contents of this section have been transcluded from another page,
BugSquad/Testing
:
BugSquad/Testing
See also
Testing
.
Testing Groups
olpc:OLPC New Zealand
&
olpc:WellyNZTesters
Teaching Users How to File Good Bug Reports
Users are often the best source of good bug reports (Trac tickets).
BugSquad/Bug Report
- How to file a ticket
Teaching Bug Reporters How to Follow Up
Many bug reports rot because of lack of follow up from reporters and users.
Describe the work flow and balance between Gitorious, Trac, Wiki, Mailing Lists, IRC.
Creating Best Practices for Developer Testing
BugSquad/Test Cases
Efficient testing harnesses
Coordinate with Release Managers
Develop Pre-release test strategies
Test cases
0.114/Testing