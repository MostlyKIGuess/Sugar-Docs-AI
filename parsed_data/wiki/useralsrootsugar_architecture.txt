Title: User:Alsroot/Sugar Architecture
URL: https://wiki.sugarlabs.org/go/User:Alsroot/Sugar_Architecture#Core_Team
--------------------------------------------------------------------------------
NOTICE:
This page is a draft in active flux...
Please contribute to these contents and discuss issues on the
discussion page
.
Contents
1
Premises
1.1
Common
1.2
Technical
1.3
Organizational
2
Implementation
2.1
Core Team
2.2
Platform Team
2.2.1
Doers environment
2.3
Sugar Universe
2.4
Progress
3
The whole picture
Premises
Please read premises from the first to the last, they are based on each other in that direction.
Common
Sugar is a community [and not a product] around ideas
(but might be a product, see below)
Community which is united around ideas of cognitive and social constructivism in [self]education. The highest result point of this process is a
Воспитание
(do not mess this word with English words like "parenting", "education", "training", "breading" etc).
Process does matter
Once
Воспитание
is a primal target, process[of doing something] is a major instrument to achieve this target. In other words, process of developing Sugar should not look like creating a product (by developers) to let other people (users) use it. Instead, Sugar consists of
doers
, all doers teach each over (and themselves) all time while creating something sustainable, starting from a hacker who codes sugar core and ending by a kid who creates his first Turtle Art project.
Cement the floor, remove the ceiling
Once
Воспитание
is a primal target and the process is a major instrument within great variety of doers, organisation is critically important. As education can't happen using only one particular instrument, such, Sugar should not impose using particular vertical structures (i.e., software applications). Instead, Sugar should provide a set of basic, low-level, horizontal instruments and a set of rules how doers should behave to create[and teach themselves] something. As addition, Sugar provides a set of ready-to-use, vertical structures but with detailed instruction how to disassemble them and how to create new creatures using the same components.
Technical
Sugar architecture starts from the
core
This means that every feature, being added to one of core component, will affect entirely Sugar ecosystem (when this core release will be accessible for most users). Thus, decision about adoption one conceptions (and not adoption another ones) is critically important.
Experiments with the core
Once core is a central part of Sugar architecture, this fact should not suppress any experiments (including useless) with the core. Here, we are skipping the huge field for possible experiments - activities, but, keeping in mind the first premise, core is the most attractive part of Sugar for doers' experiments.
Easy to get, easy to change, easy to share
Once core is a central part of Sugar architecture and Sugar should stimulate doers to make experiments with the core, it is critically important to make this process as convenient as possible. Saying that current situation does not prevent any experiments with the core is a hypocrisy. It is easy to get core sources, it is less easy to change them (If we are talking about collaboration between participants on, e.g., sugar mailing lists. For other people, there is only one sugar core and any experiments will finally affect it, if "do not stop" these efforts), it is mostly impossible to share results of experiments (asking to fetch new sources and build them is not useful in most cases).
Organizational
Sugar needs the be a product as well
The first method to distribute Sugar are various GNU/Linux based distributions and Sugar deployments. For them, Sugar has to be a product because only in that case they can schedule releases and deployments.
Change the minds
Once Sugar might be a product, it is critically important to understand the unoriginality of this fact. Deploying the Sugar gives only the first push (technical possibility to run Sugar). The major behaviour happens within the community; in class, school, region, around the world. In other words, in situation when the code is mutating and spreading fast on irregular basis.
Organized chaos
Keeping in mind all premises, any trying to create a concrete organizational structure for Sugar itself (but not for its particular components when concrete organization makes sense, e.g., for deployments) is defected by design. On high level, ecosystem might be a set of self-organized components that need only rules to interact with each other. Particular Sugar ecosystem components (software project, teams, deployments, etc.) might use various management systems, starting from anarchy and ending by despotism.
Implementation
Start key points:
Before arguing with implementation details, check if you are agree with
premises
.
For the first time, nothing will be changed for, e.g., Sugar deployments (if it will be changed at all).
Implementation might take several core releases, it is exactly the path of step-by-step Sugar evolution.
It is just details of implementation and might lack of important details and be changed in process.
Please, improve it.
Core Team
Core Team is a team of architects of Sugar ecosystem.
The team should contain at least one person for each followed category. The list is sorted from the most important categories to the least, since it is fine to have unskilled developers, maybe fine to have unskilled designers, but it is critically important to have skilled educators.
Experienced educators. To throw in ideas and methodology.
Designers and Human Interface specialists. To think how implementation might look and behave.
Developers, to limit educators and designers in their dreams.
Core Team generates ideas and is not restricted by any releases and distribution schedules (it is
Platform Team
task). It identifies the major trends for Sugar. The area of responsibility of the Core Team is not only a limited set of Sugar components but any project of Sugar
universe
. The team takes part in discussing/improving
Features
, the consolidated opinion of the team is critically important for
tracked projects
. Particular project might agree or disagree (and follow another way or try to dissuade Core Team by their particular implementations), but the Core Team is exactly what Sugar face is for non-sugar community.
Platform Team
The mission of the Platform Team is functionally support Sugar ecosystem from technical side:
Develop new or tune existed services that might be useful for Sugar ecosystem. It is not about taking job from Infrastructure Team that does technical support for Sugar Labs servers but about taking care what functionality needs to be run on these servers.
Providing as-unified-as-possible runtime and development time environments for all Sugar doers, regardless of what platform they are using. In other words, Platform Team makes everything to let ideas, generated by Core Team (as well as any other ideas), happen within the Sugar
community
.
Work closely with GNU/Linux distributions, that provide sugar packages, and Sugar deployments to fulfill their needs and coordinate related efforts within Sugar community.
Take care of technical standards (API, DBus interface, etc) to let all Sugar components/activities interact smooth.
Doers environment
Stable Sugar Distribution is a startup kit for Sugar doers. The real doing starts where new code is involved, e.g., by getting new versions of activities or preparing and sharing new code. Thus, where read-only nature of Stable Sugar Distribution is insufficient.
The key features that any Sugar doer needs, are:
possibility to run any (including not yet released) versions of Sugar
components
,
useful instruments to edit the code,
share the code in peer-to-peer manner to fast and easy sharing of experiment results with the friends (F1/F2 views),
share the code on more regular basis, i.e., uploading changed code to the server.
Sugar Universe
Thats the matter of Sugar, i.e., what makes Sugar useful. The variety of Sugar software projects, Glucose projects, libraries and activities.
Sugar projects work closely with the Core Team (that generates ideas) and with the Platform Team (that provides the technical floor).
Most of them are being developed and supported by individuals (mostly activities), the rest are using management model which is most useful for them. All of them are self organized structures and have their own release schedules and roadmaps, though
Sugar Distribution
projects release new versions in close interaction with the Platform Team.
Progress
Initial release of Doers Environment
The whole picture
As the last
premise
says, the major idea is not creating concrete vertical organizational structures for Sugar ecosystem but giving
fruitful ideas
,
useful instruments and rules-how-communicate
to Sugar
doers
to let them gain an
experience and knowledge
during the process of implementation, and
spreading
the results within Sugar community.
When community of Sugar doers is:
Open minded educators, designers and just thinkers who don't asked themselves,
Am I doing right, designing/thinking-about this, so invasive for Sugar, feature?
and free in choosing the way they think is important.
Open minded developers of Sugar
projects
, who don't asked themselves,
Am I doing right, implementing this, so invasive for Sugar, feature?
and free in choosing the way they think is important.
Purpose minded
Platform Team
that releases the
product
.